#!/usr/bin/env bash

########################################################################
# Copyright (C) 2013 - 2021 : Kathrin Hanauer                          #
#                                                                      #
# This file is part of Algora.                                         #
#                                                                      #
# Algora is free software: you can redistribute it and/or modify       #
# it under the terms of the GNU General Public License as published by #
# the Free Software Foundation, either version 3 of the License, or    #
# (at your option) any later version.                                  #
#                                                                      #
# Algora is distributed in the hope that it will be useful,            #
# but WITHOUT ANY WARRANTY; without even the implied warranty of       #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the        #
# GNU General Public License for more details.                         #
#                                                                      #
# You should have received a copy of the GNU General Public License    #
# along with Algora.  If not, see <http://www.gnu.org/licenses/>.      #
#                                                                      #
# Contact information:                                                 #
#   http://algora.xaikal.org                                           #
########################################################################

set -e

print_usage() {
	echo "Usage: $0 [-f] <PATH_TO_TEMPLATE_FILE> <PATH_TO_OUTPUT_FILE>"
}

FORCE=0

if [ "$1" == "-f" ]
then
	FORCE=1
	shift
fi

VERSION_HEADER_TEMPLATE=$1
VERSION_HEADER_OUTPUT=$2

if [ -z "${VERSION_HEADER_TEMPLATE}" ] || [ -z "${VERSION_HEADER_OUTPUT}" ]
then
	print_usage
	exit 1
fi

[ -f "${VERSION_HEADER_TEMPLATE}" ] || eval 'echo "Version header file ${VERSION_HEADER_TEMPLATE} not found." 1>&2; exit 1'

[ -z "${GIT_CMD}" ] && GIT_CMD=$(which git 2>/dev/null)
[ -n "${GIT_CMD}" ] || eval 'echo Binary "git" not found. Please specify its location explicitly via the GIT_CMD variable." 1>&2; exit 1'

GIT_REVISION=$(${GIT_CMD} log --pretty=format:'%H' -n 1)
GIT_DATE=$(${GIT_CMD} log --pretty=format:'%aI' -n 1)
GIT_TIMESTAMP=$(${GIT_CMD} log --pretty=format:'%at' -n 1)

echo "Git revision: ${GIT_REVISION}"
echo "Git date: ${GIT_DATE}"
echo "Git timestamp: ${GIT_TIMESTAMP}"

if [ "${FORCE}" -eq "0" ] && grep -q $GIT_REVISION $VERSION_HEADER_TEMPLATE && grep -q "$GIT_TIMESTAMP" $VERSION_HEADER_TEMPLATE
then
	echo "Git revision unchanged. No update required."
	exit 0
fi

GIT_REVISION_IN_HEADER="  static constexpr char GIT_REVISION[] = \"${GIT_REVISION}\";"
GIT_DATE_IN_HEADER="  static constexpr char GIT_DATE[] = \"${GIT_DATE}\";"
GIT_TS_IN_HEADER="  static constexpr char GIT_TIMESTAMP[] = \"${GIT_TIMESTAMP}\";"

cp ${VERSION_HEADER_TEMPLATE} ${VERSION_HEADER_OUTPUT}

sed -i -e "s/^.*GIT_REVISION.*$/${GIT_REVISION_IN_HEADER}/" ${VERSION_HEADER_OUTPUT}
sed -i -e "s/^.*GIT_DATE.*$/${GIT_DATE_IN_HEADER}/" ${VERSION_HEADER_OUTPUT}
sed -i -e "s/^.*GIT_TIMESTAMP.*$/${GIT_TS_IN_HEADER}/" ${VERSION_HEADER_OUTPUT}
